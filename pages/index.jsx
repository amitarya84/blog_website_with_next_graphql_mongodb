import Head from 'next/head';
// import { gql } from "@apollo/client";
// import client from "../apollo-client";
import { useState, useEffect } from 'react';
import styles from '../styles/Home.module.scss'
import LoadingSpinner from '../components/UI/LoadingSpinner'
import OutlineButton from '../components/UI/OutlineButton';
import Blog from '../components/Blog';



export default function Home({ blogs }) {
  const [loading, setLoading] = useState(false);
  const [posts, setPosts] = useState([]);

  useEffect(() => {
    setPosts(blogs)
  });

  const fetchBtnHandler = async e => {
    setLoading(true);
    let query = `
    query Query {
      blogs {
        _id,
        title,
        imageName,
        blogText
      }
    }
    `
    const res = await fetch('http://localhost:3000/api/graphql', {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({
        query: query
      })
    });
    const data = await res.json();

    setPosts(data.data.blogs)
  }

  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      {/* <Test /> */}


      <main>
        <div className="blogs">
          {
            posts.map(
              blog => <Blog
                key={blog._id}
                blogData={{ _id: blog._id, title: blog.title, blogText: blog.blogText, img: blog.imageName }}
              />
            )
          }

          {/* <div className="blog">
           { loading && <LoadingSpinner /> }
           { posts.map(post => <Blog key={Math.random()} blogData={post} />) }
           { (posts.length < 1) ? <h2 className={styles.noPost}>No Posts to Read</h2> : ''}
            <OutlineButton clickHandler={fetchBtnHandler}>Fetch Posts</OutlineButton>
          </div> */}

        </div>
      </main>
    </div>
  )
}

export const getStaticProps = async () => {

  let query = `
  query Query {
    blogs {
      _id,
      title,
      imageName,
      blogText

    }
  }
  `
  const res = await fetch('http://localhost:3000/api/graphql', {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify({
      query: query
    })
  });
  const data = await res.json();
  console.log(data.data)

  return {
    props: {
      blogs: data.data.blogs
    }
  }
}